{"version":3,"sources":["models/Grid.ts","models/Solver.ts","models/Utils.ts","stories/Cell.module.scss","App.module.scss","stories/Grid.module.scss","stories/Cell.tsx","stories/Grid.tsx","App.tsx","index.tsx"],"names":["Grid","constructor","cells","clone","this","map","c","Object","assign","toString","x","undefined","number","join","isCompleted","every","isCompletedAndValid","type","i","numbers","Set","j","colRow","colRowForType","cell","get","add","size","emptyCells","reduce","acc","candidates","sort","a","b","length","static","notation","replace","split","Number","isInitial","grid1","grid2","same","forEach","c2","c1","isDiff","sameCandidates","Math","floor","setNumber","col","row","toggleCandidate","candidate","includes","filter","clearCell","backtracking","firstEmptyCell","gridClone","changed","fillNumberOrCandidatesImpactedByCell","res","solveWithStep","step","fillNumberOrCandidatesForAllCells","fillNumberOrCandidatesForCell","Array","from","_","n","r","boxFirstCol","ceil","boxFirstRow","newNumber","anyChange","removeCandidateFromCell","different","singleCandidateForNumberInGroup","occurrences","Map","v","push","set","k","candidatesTuplesRemoveOtherCandidates","candidatesMap","partialTuplesMap","fullTuplesMap","allCells","setOrInit","tuple","allPossibleTuples","removeCandidates","sameArrays","alignedCandidatesInBoxRemoveCandidatesOnLine","candidatesColumns","candidatesRows","tuples","_ref","t","lines","otherMap","has","iMod3","jMod3","i147","iDiv3","value","index","isValid","candidatesAreSet","some","numbersMap","values","count","GRIDS","easy","medium","hard","expert","Solver","grid","solve","cleanedGrid","remainingStepsWithoutChange","STEPS","nextStep","oldGrid","newGrid","originalNewGrid","wasCleaned","colorDiff","array","a1","a2","key","module","exports","Cell","_jsxs","className","styles","root","children","_jsx","initial","style","visibility","numberShortcuts","gridModel","render","forceRender","useState","gridModel$","setGridModel$","useEffect","hoveredColRow","setHoveredColRow","shortcut","useHotkeys","event","repeat","backgroundColor","GridModel","onMouseEnter","onMouseLeave","gridNotationRegex","App","initialHash","window","location","hash","substring","initialGridFromHashOrDefault","test","random","initialGrid","gridInNotation","setGridInNotation","setGridModel","newFromNotation","gridIsValid","setGridIsValid","useLocation","newModel","setStepByStep","stepByStep","generateGrid","difficulty","left","display","flexDirection","gap","onClick","maxLength","onChange","e","currentTarget","color","alignItems","margin","padding","listStylePosition","center","right","stepByStepGrids","solvedGrid","disabled","reload","overflow","g","zoom","textTransform","height","ReactDOM","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.2a7e6283.chunk.js","sourcesContent":["import {allPossibleTuples, sameArrays, setOrInit} from './Utils'\nimport {SolvingStep} from './Solver'\n\nexport interface CellProps {\n    number?: number\n    candidates: number[]\n    isInitial?: boolean\n    isDiff?: boolean\n}\n\nexport class Grid {\n    constructor(public cells: CellProps[]) {\n    }\n\n    clone(): Grid {\n        return new Grid(this.cells.map(c => Object.assign({}, c)))\n    }\n\n    toString(): string {\n        return this.cells.map(x => x.number !== undefined ? x.number : '.').join('')\n    }\n\n    isCompleted(): boolean {\n        return this.cells.every(c => c.number !== undefined)\n    }\n\n    isCompletedAndValid(): boolean {\n        for (const type of ['row', 'col', 'box']) {\n            for (let i = 1; i <= 9; i++) {\n                const numbers = new Set<number>()\n                for (let j = 1; j <= 9; j++) {\n                    const colRow = Grid.colRowForType(type, j, i)\n                    const cell = this.get(colRow[0], colRow[1])\n                    if (cell.number !== undefined) {\n                        numbers.add(cell.number)\n                    }\n                }\n                if (numbers.size !== 9) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    emptyCells(): [CellProps, number][] {\n        return this.cells\n            .reduce((acc, c, i) => {\n                c.candidates = c.candidates.sort((a, b) => a - b)\n                return c.number === undefined ? [...acc, [c, i]] as [CellProps, number][] : acc\n            }, [] as [CellProps, number][])\n            .sort((a, b) => a[0].candidates.length - b[0].candidates.length)\n    }\n\n    static newFromNotation(notation: string): Grid {\n        notation = notation.replace(/\\n/g, '')\n        return new Grid(notation.split('').map(c => ({\n            number: c === '.' ? undefined : Number(c),\n            candidates: [],\n            isInitial: c !== '.',\n        })))\n    }\n\n    static colorDiff(grid1: Grid, grid2: Grid): boolean {\n        let same = true\n        grid2.cells.forEach((c2, i) => {\n            const c1 = grid1.cells[i]\n            c2.isDiff = c2.number !== c1.number || !Grid.sameCandidates(c2.candidates, c1.candidates)\n            if (c2.isDiff) {\n                same = false\n            }\n        })\n        return same\n    }\n\n    static colRow(i: number): [number, number] {\n        return [i % 9 + 1, Math.floor(i / 9 + 1)]\n    }\n\n    setNumber(col: number, row: number, number: number): Grid {\n        const cell = this.get(col, row)\n        cell.number = number\n        return this.clone()\n    }\n\n    toggleCandidate(col: number, row: number, candidate: number): Grid {\n        const cell = this.get(col, row)\n        cell.number = undefined\n        if (cell.candidates.includes(candidate)) {\n            cell.candidates = cell.candidates.filter(c => c !== candidate)\n        } else {\n            cell.candidates = [...cell.candidates, candidate]\n        }\n        return this.clone()\n    }\n\n    clearCell(col: number, row: number): Grid {\n        const cell = this.get(col, row)\n        cell.number = undefined\n        cell.candidates = []\n        return this.clone()\n    }\n\n    backtracking(): Grid | undefined {\n        if (this.isCompleted()) {\n            if (this.isCompletedAndValid()) {\n                return this\n            }\n            return undefined\n        }\n        const firstEmptyCell = this.emptyCells()[0]\n        const candidates = firstEmptyCell[0].candidates.map(c => c)\n        for (const candidate of candidates) {\n            const gridClone = this.clone()\n            gridClone.cells[firstEmptyCell[1]].number = candidate\n            const [col, row] = Grid.colRow(firstEmptyCell[1])\n            let changed = false\n            do {\n                changed = gridClone.fillNumberOrCandidatesImpactedByCell(col, row)\n            } while (changed)\n            const res = gridClone.backtracking()\n            if (res !== undefined) {\n                return res\n            }\n        }\n        return undefined\n    }\n\n    solveWithStep(step: SolvingStep): Grid {\n        const clone = this.clone()\n        clone[step]()\n        return clone\n    }\n\n    fillNumberOrCandidatesForAllCells(): void {\n        for (let row = 1; row <= 9; row++) {\n            for (let col = 1; col <= 9; col++) {\n                this.fillNumberOrCandidatesForCell(col, row)\n            }\n        }\n    }\n\n    fillNumberOrCandidatesForCell(col: number, row: number): void {\n        const cell = this.get(col, row)\n        if (cell.number === undefined) {\n            let candidates = cell.candidates.length > 0 ? cell.candidates : Array.from({length: 9}, (_, i) => i + 1)\n            for (let c = 1; c <= 9; c++) {\n                candidates = candidates.filter(n => n !== this.get(c, row).number)\n            }\n            for (let r = 1; r <= 9; r++) {\n                candidates = candidates.filter(n => n !== this.get(col, r).number)\n            }\n            const boxFirstCol = Math.ceil(col / 3) * 3 - 2\n            const boxFirstRow = Math.ceil(row / 3) * 3 - 2\n            for (let r = boxFirstRow; r <= boxFirstRow + 2; r++) {\n                for (let c = boxFirstCol; c <= boxFirstCol + 2; c++) {\n                    candidates = candidates.filter(n => n !== this.get(c, r).number)\n                }\n            }\n            if (candidates.length === 1) {\n                cell.number = candidates[0]\n            }\n            cell.candidates = candidates\n        }\n    }\n\n    fillNumberOrCandidatesImpactedByCell(col: number, row: number): boolean {\n        const newNumber = this.get(col, row).number\n        let anyChange = false\n        if (newNumber !== undefined) {\n            for (let c = 1; c <= 9; c++) {\n                if (this.removeCandidateFromCell(c, row, newNumber)) {\n                    anyChange = true\n                }\n            }\n            for (let r = 1; r <= 9; r++) {\n                if (this.removeCandidateFromCell(col, r, newNumber)) {\n                    anyChange = true\n                }\n            }\n            const boxFirstCol = Math.ceil(col / 3) * 3 - 2\n            const boxFirstRow = Math.ceil(row / 3) * 3 - 2\n            for (let r = boxFirstRow; r <= boxFirstRow + 2; r++) {\n                for (let c = boxFirstCol; c <= boxFirstCol + 2; c++) {\n                    if (this.removeCandidateFromCell(c, r, newNumber)) {\n                        anyChange = true\n                    }\n                }\n            }\n        }\n        return anyChange\n    }\n\n    removeCandidateFromCell(col: number, row: number, candidate: number): boolean {\n        const cell = this.get(col, row)\n        if (cell.number === undefined) {\n            const candidates = cell.candidates.filter(c => c !== candidate)\n            if (candidates.length === 1) {\n                cell.number = candidates[0]\n                this.fillNumberOrCandidatesImpactedByCell(col, row)\n                return true\n            }\n            const different = cell.candidates.length !== candidates.length || !candidates.every((c) => cell.candidates.includes(c))\n            cell.candidates = candidates\n            return different\n        }\n        return false\n    }\n\n    singleCandidateForNumberInGroup() {\n        for (const type of ['row', 'col', 'box']) {\n            for (let i = 1; i <= 9; i++) {\n                const occurrences = new Map<number, CellProps[]>()\n                for (let j = 1; j <= 9; j++) {\n                    const colRow = Grid.colRowForType(type, j, i)\n                    const cell = this.get(colRow[0], colRow[1])\n                    for (const candidate of (cell.number ? [cell.number] : cell.candidates)) {\n                        const v = occurrences.get(candidate)\n                        if (v) {\n                            v.push(cell)\n                        } else {\n                            occurrences.set(candidate, [cell])\n                        }\n                    }\n                }\n                occurrences.forEach((v, k) => {\n                    if (v.length === 1 && v[0].number === undefined) {\n                        v[0].number = k\n                    }\n                })\n            }\n        }\n    }\n\n    candidatesTuplesRemoveOtherCandidates() {\n        for (const type of ['row', 'col', 'box']) {\n            for (let i = 1; i <= 9; i++) {\n                const candidatesMap = new Map<number, CellProps[]>()\n                const partialTuplesMap = new Map<string, CellProps[]>()\n                const fullTuplesMap = new Map<string, CellProps[]>()\n                const allCells: CellProps[] = []\n                for (let j = 1; j <= 9; j++) {\n                    const colRow = Grid.colRowForType(type, j, i)\n                    const cell = this.get(colRow[0], colRow[1])\n                    if (cell.number === undefined && cell.candidates.length > 0) {\n                        allCells.push(cell)\n                        const candidates = cell.candidates.sort((a, b) => a - b)\n                        for (const candidate of candidates) {\n                            setOrInit(candidatesMap, candidate, cell)\n                        }\n                        for (const tuple of allPossibleTuples(candidates)) {\n                            setOrInit(partialTuplesMap, tuple.join(''), cell)\n                        }\n                        setOrInit(fullTuplesMap, candidates.join(''), cell)\n                    }\n                }\n                fullTuplesMap.forEach((cells, k) => {\n                    if (k.length > 1 && k.length === cells.length) {\n                        this.removeCandidates(k, allCells, cells)\n                    }\n                })\n                partialTuplesMap.forEach((cells, k) => {\n                    if (k.length === cells.length && k.split('').every(candidate => sameArrays(candidatesMap.get(Number(candidate)), cells))) {\n                        this.removeCandidates(k, allCells, cells)\n                    }\n                })\n            }\n        }\n    }\n\n    alignedCandidatesInBoxRemoveCandidatesOnLine() {\n        for (let i = 1; i <= 9; i++) {\n            const candidatesColumns = new Map<number, number[]>()\n            const candidatesRows = new Map<number, number[]>()\n            for (let j = 1; j <= 9; j++) {\n                const colRow = Grid.colRowForType('box', j, i)\n                const cell = this.get(colRow[0], colRow[1])\n                if (cell.number === undefined && cell.candidates.length > 0) {\n                    cell.candidates.forEach(candidate => {\n                        setOrInit(candidatesColumns, candidate, colRow[0])\n                        setOrInit(candidatesRows, candidate, colRow[1])\n                    })\n                }\n            }\n            const tuples: [Map<number, number[]>, string][] = [[candidatesColumns, 'col'], [candidatesRows, 'row']]\n            tuples.forEach(([map, type], t) => {\n                map.forEach((lines, candidate) => {\n                    if (new Set(lines).size === 1) {\n                        const otherMap = new Set(tuples[t === 0 ? 1 : 0][0].get(candidate))\n                        if (otherMap && otherMap.size > 1) {\n                            for (let j = 1; j <= 9; j++) {\n                                if (!otherMap.has(j)) {\n                                    const colRow = Grid.colRowForType(type === 'col' ? 'row' : 'col', lines[0], j)\n                                    const cell = this.get(colRow[0], colRow[1])\n                                    if (cell.number === undefined && cell.candidates.length > 0) {\n                                        cell.candidates = cell.candidates.filter(c => c !== candidate)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    private static colRowForType(type: string, j: number, i: number): [number, number] {\n        switch (type) {\n            case 'col':\n                return [i, j]\n            case 'row' :\n                return [j, i]\n            default:\n                const iMod3 = ((i - 1) % 3) + 1\n                const jMod3 = ((j - 1) % 3) + 1\n                const i147 = iMod3 === 1 ? 1 : (iMod3 === 2 ? 4 : 7)\n                const iDiv3 = Math.ceil(i / 3)\n                const jDiv3 = Math.ceil(j / 3)\n                const j147 = iDiv3 === 1 ? 1 : (iDiv3 === 2 ? 4 : 7)\n                return [i147 + jMod3 - 1, j147 + jDiv3 - 1]\n        }\n    }\n\n    private static sameCandidates(c1: number[], c2: number[]): boolean {\n        return c1.length === c2.length && c1.every((value, index) => value === c2[index])\n    }\n\n    private removeCandidates(k: string, allCells: CellProps[], cells: CellProps[]): void {\n        const candidates = k.split('').map(c => Number(c))\n        for (const cell of allCells) {\n            if (!cells.includes(cell)) {\n                cell.candidates = cell.candidates.filter(c => !candidates.includes(c))\n            }\n        }\n    }\n\n    get(col: number, row: number): CellProps {\n        return this.cells[(col - 1) + (row - 1) * 9]\n    }\n\n    isValid(candidatesAreSet?: boolean) {\n        if (candidatesAreSet && this.cells.some(c => c.number === undefined && c.candidates.length === 0)) {\n            return false\n        }\n        for (const type of ['row', 'col', 'box']) {\n            for (let i = 1; i <= 9; i++) {\n                const numbersMap = new Map<number, number>(Array.from({length: 9}, (_, i) => [i + 1, 0]))\n                for (let j = 1; j <= 9; j++) {\n                    const colRow = Grid.colRowForType(type, j, i)\n                    const cell = this.get(colRow[0], colRow[1])\n                    if (cell?.number !== undefined) {\n                        numbersMap.set(cell.number, numbersMap.get(cell.number)! + 1)\n                    }\n                }\n                if (Array.from(numbersMap.values()).some(count => count > 1)) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n}\n\nexport const GRIDS = {\n    easy: [\n        '7..4..316...7....99.6..87.22.9154873..1637..4.7.2.....6.4..123...2......3..8.2691',\n        '26.8913.7.79......1.86.7...7.1.69..4456...9.2..2.1.7.66...728..813.........5.364.',\n        '8714.5..2.326.75...46.198.....9.......4.5319.7...61....97146....65.9.....8.57.64.',\n        '.625.3....5.....1...7.982..72.6843.594.7.518238.....6.....56.71.7....5.9..89.....',\n        '3..4.6752...7..9.87.98..41.1.7.2.345.543..1..2........9.5.34.81.62.8.5.38..5.....',\n        '29...53..57..8.6246........9.821.465....58297..26.4.8..6.5.1.3.....7.5..345..6..1',\n        '.....56.81..26..5365.73...1....7238..1..46.2..29....6.8.16.794246....7..9..3..81.',\n        '..67..853.523.......8.467122..8.1.67.7.46.9..6.1...2..86....14...96....83.51...29',\n        '.....2.6.5.198....29....1....5...9...7.26..1.....3987.93.6487.1..8...6.3756.914.2',\n        '5..6.2.......594.6..8....2.75.3.614812.98765.83..4....4.7...36...57..8.26...9....',\n    ],\n    medium: [\n        '7.85436...9.6..1..5..1.....3..9.458.9.......7..7..5...1....6..3.36.5.79.2.......5',\n        '.49..13...2.394.8...8..2.4.....6....8.4....631...3.9..4....9.5.28...34.7.7...613.',\n        '..13.9......18.4...5....9...1.5.23....7..6..14...715..97.61......84.5.7.3.4.2....',\n        '67....9...8..6.5..5.24..168.6..87..93......2....6.3.....3.......5913.746.2.....5.',\n        '..4.7.69...5.39.4.1....57.....9...6...27..53.5..4..8197....6....81........38.7.5.',\n        '....4.1...1.95...49......8.4.5..37.2.2.5..9....3.9..48..8.76..3......2.7..9.35.1.',\n        '...361.926...9.......7...6..9..8.34.746........34..62.......23..72...489...85..7.',\n        '1......7.2..49.1.6..5..189....1......215........9382159...45......3.974.4.8....39',\n        '....7.......39..27.9.45.16.......258.....6749...52.6....18..97...87.4...34..1....',\n        '7623...48.1.......4..1..69..41963..538......6.......3.6...5..2...4.....9..978.4..',\n\n    ],\n    hard: [\n        '.5.68..1.7....54...1..2.6...98....43........1....7....2...9...483.76.....7......5',\n        '....9.2...63..1.8.52....9.63957..14...84.5....4..1....6...2.5.9.......2..8..5....',\n        '.......87.....8.4.1.7...59..35..47..426.........2694..87...6....4..8...3..1.57...',\n        '8...6............9..5...1.8.485...1...68.2....9..3...76.71.49..1.9...4.235......1',\n        '6....481....2......1......493...8......3..572...........1.....54..6.53.7.67......',\n        '3.1...9...2..3..545....7..3.5...471..3...2..9..76.....2.....59......1.37..95....1',\n        '..1.9...33.7.......8..5..1..1...92...4..6..8...........9...4.6......7.3.47...2..8',\n        '9..6..53......1.627.2.9...8.4...987.....2...65...1......4.....9...95.2.......7...',\n        '..5...3......9..7.......4.8216........3685..95......6.8.4.3.....6.8....3...9.71..',\n        '..6.4.9...7..2.1.4..3.1.....3.9...5...58..7.........13.........2...9.5....76..4..',\n    ],\n    expert: [\n        '.931............28....7..6..7...1...9.5....3.1...6......4..27......3...5.67....94',\n        '.8.9......9.........6..28..2...1..54.31......9..6...8........3....85..6.12..46...',\n        '.8..3.6.935.......2..91........7.8......5...66..8...9....2...58..........71..6..3',\n        '1....42...7.3....6..5.6..9.........9....8.6.4..7...38...2..5.3.31......8.4.......',\n        '......3..7.2..1.........7.8...5....72..94.....9.6...52....9...3.85.6.4..1......8.',\n        '...26.9.......83.11..........7......8..3.5....9....28....6...7..6.....5...897.1..',\n        '..3.....4...7.9..8.9....2..135......4..28....2..6.........5.........251..4..1..3.',\n        '.....4.8..8.....1.72......9.....1..7....58.3..9..4.....75...1..4....6.....12..9..',\n        '.29.......3....5.........16...521.....1.9.7......3..9....8.5..4.5......73.2..6...',\n        '...9..8.23....2....7....1....74.....5..8.6......2...13.3......81.....94..9..74...',\n    ]\n}\n","import { Grid } from './Grid'\n\nexport class Solver {\n  constructor(public grid: Grid) {}\n\n  solve(): Grid | undefined {\n    if (!this.grid.isValid()) {\n      return undefined\n    }\n    let remainingStepsWithoutChange = STEPS.length\n    let nextStep = 0\n    let cleanedGrid\n    let same\n    let oldGrid = this.grid.clone()\n    let newGrid = oldGrid\n    while (remainingStepsWithoutChange > 0) {\n      newGrid = oldGrid\n      const originalNewGrid = newGrid\n      let wasCleaned = false\n      do {\n        cleanedGrid = newGrid.solveWithStep('fillNumberOrCandidatesForAllCells')\n        if (!cleanedGrid.isValid(true)) {\n          return undefined\n        }\n        same = Grid.colorDiff(newGrid, cleanedGrid)\n        if (!same) {\n          newGrid = cleanedGrid\n          wasCleaned = true\n        }\n      } while (!same)\n      if (wasCleaned) {\n        Grid.colorDiff(originalNewGrid, cleanedGrid)\n        oldGrid = cleanedGrid\n      }\n      newGrid = oldGrid.solveWithStep(STEPS[nextStep])\n      if (!newGrid.isValid(true)) {\n        return undefined\n      }\n      same = Grid.colorDiff(oldGrid, newGrid)\n      remainingStepsWithoutChange = same ? remainingStepsWithoutChange - 1 : STEPS.length\n      if (!same) {\n        oldGrid = newGrid\n      }\n      nextStep = (nextStep + 1) % STEPS.length\n    }\n    if (newGrid.isCompleted()) {\n      return newGrid\n    }\n    return newGrid.backtracking()\n  }\n}\n\nexport type SolvingStep =\n  'fillNumberOrCandidatesForAllCells'\n  | 'singleCandidateForNumberInGroup'\n  | 'candidatesTuplesRemoveOtherCandidates'\n  | 'alignedCandidatesInBoxRemoveCandidatesOnLine'\n  | 'backtracking'\n\nexport const STEPS: SolvingStep[] = [\n  // for each line, if a candidate is the only one of its number, it is filled in\n  'singleCandidateForNumberInGroup',\n  // for each line/box, if there are same candidates tuples, remove their candidates from other cells\n  // for each line/box, if there are candidate tuples with candidates not appearing elsewhere, remove their other candidates\n  // (https://www.kristanix.com/sudokuepic/6hiddensubset.png)\n  'candidatesTuplesRemoveOtherCandidates',\n  // pointing pairs/triples (https://www.sudokuwiki.org/PuzImages/PP1.png)\n  'alignedCandidatesInBoxRemoveCandidatesOnLine',\n\n  // great documentation on techniques:\n  //   * https://www.sudokuwiki.org/Strategy_Families\n  //   * https://www.sudopedia.org/wiki/Solving_Technique\n\n  // solve any sudoku: https://dancing-links.herokuapp.com/\n\n  // box line reduction (https://www.sudokuwiki.org/PuzImages/BLR1.png)\n  // double pointing pairs (https://www.kristanix.com/sudokuepic/4blockblock.png)\n  // x-wing (https://www.kristanix.com/sudokuepic/7xwing.png)\n  // y-wing (https://www.sudokuwiki.org/PuzImages/YWing1.png)\n  // swordfish. Very complex... (https://www.kristanix.com/sudokuepic/sudoku-solving-techniques.php)\n  // single chains. A bit bruteforce though... (https://www.sudokuwiki.org/Singles_Chains)\n]\n","import { readFileSync } from 'fs'\nimport path from 'path'\nimport { Solver } from './Solver'\nimport { Grid } from './Grid'\n\nexport function allPossibleTuples(array: number[]): number[][] {\n  return Array.from({length: 1 << array.length}, (_, i) => array.filter((_, j) => (i & 1) << j))\n    .filter(n => n.length > 1)\n}\n\nexport function sameArrays<T>(a1?: T[], a2?: T[]): boolean {\n  if (a1 === undefined && a2 === undefined) {\n    return true\n  }\n  if (a1 === undefined || a2 === undefined) {\n    return false\n  }\n  return a1.length === a2.length && a1.every((value, index) => value === a2[index])\n}\n\nexport function setOrInit<K, V>(map: Map<K, V[]>, key: K, value: V) {\n  const v = map.get(key)\n  if (v) {\n    v.push(value)\n  } else {\n    map.set(key, [value])\n  }\n}\n\nexport function testAllGridsInFile(checkSolution = true): void {\n  const notations = readFileSync(path.join(__dirname, `../../dataset/${expect.getState().currentTestName}.txt`), 'utf8').trimEnd().split('\\n')\n  const solvedCount = notations.reduce((acc, notation, i) => {\n    console.log(i, acc, notations.length)\n    const solved = new Solver(Grid.newFromNotation(notation)).solve()\n    if (checkSolution) {\n      if (solved!.isCompletedAndValid()) {\n        return acc + 1\n      }\n    } else if (solved === undefined) {\n      return acc + 1\n    }\n    return acc\n  }, 0)\n  console.log(`Solved ${solvedCount}`)\n  expect(solvedCount).toBe(notations.length)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Cell_root__3kq8h\",\"number\":\"Cell_number__b6JWS\",\"candidates\":\"Cell_candidates__1c9Wo\",\"initial\":\"Cell_initial__1zgcJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2CSG3\",\"left\":\"App_left__1ks1Q\",\"center\":\"App_center__3qpZh\",\"right\":\"App_right__1V0tl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Grid_root__2EOIu\"};","import React, { FC } from 'react'\nimport styles from './Cell.module.scss'\nimport { CellProps } from '../models/Grid'\n\nexport const Cell: FC<CellProps> = ({number, candidates, isInitial}) => {\n  return (\n    <div className={styles.root}>\n      {number && (\n        <div className={styles.number + (isInitial ? ' ' + styles.initial : '')}>\n          <div>{number}</div>\n        </div>\n      )}\n      <div className={styles.candidates}>\n        {Array.from({length: 9}, (_, i) => (\n          <div key={i} className={styles.candidate} style={{visibility: number || !candidates.includes(i + 1) ? 'hidden' : 'visible'}}>{i + 1}</div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, {FC, useEffect, useState} from 'react'\nimport styles from './Grid.module.scss'\nimport {Cell} from './Cell'\nimport {useHotkeys} from 'react-hotkeys-hook'\nimport {CellProps, Grid as GridModel} from '../models/Grid'\n\ninterface GridProps {\n    gridModel: GridModel\n}\n\nconst numberShortcuts: [(i: number) => string, 'setNumber' | 'toggleCandidate'][] = [\n    [(i) => `${i}`, 'setNumber'],\n    [(i) => `shift+${i}`, 'toggleCandidate']\n]\n\nexport const Grid: FC<GridProps> = ({gridModel}) => {\n    const [render, forceRender] = useState(false)\n    const [gridModel$, setGridModel$] = useState<GridModel>(gridModel)\n    useEffect(() => setGridModel$(gridModel), [gridModel])\n    const [hoveredColRow, setHoveredColRow] = useState<[number, number]>()\n\n    for (let i = 1; i <= 9; i++) {\n        for (const shortcut of numberShortcuts)\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useHotkeys(shortcut[0](i), (event) => {\n                if (hoveredColRow && !event.repeat && !gridModel$.get(hoveredColRow[0], hoveredColRow[1]).isInitial) {\n                    setGridModel$(gridModel$[shortcut[1]](hoveredColRow[0], hoveredColRow[1], i))\n                    forceRender(!render)\n                }\n            }, [hoveredColRow, gridModel$, forceRender])\n    }\n    useHotkeys(['backspace', 'delete'], (event) => {\n        if (hoveredColRow && !event.repeat && !gridModel$.get(hoveredColRow[0], hoveredColRow[1]).isInitial) {\n            setGridModel$(gridModel$.clearCell(hoveredColRow[0], hoveredColRow[1]))\n            forceRender(!render)\n        }\n    }, [hoveredColRow, gridModel$, forceRender])\n\n    function backgroundColor(col: number, row: number, cell: CellProps) {\n        if (hoveredColRow?.[0] === col && hoveredColRow?.[1] === row) {\n            if (cell.isDiff) {\n                return '#8FCFE4'\n            }\n            return '#1FA1F3'\n        } else if (hoveredColRow?.[0] === col || hoveredColRow?.[1] === row) {\n            if (cell.isDiff) {\n                return '#F0F5E5'\n            }\n            return '#E0EDF6'\n        }\n        if (cell.isDiff) {\n            return '#FFFDD4'\n        }\n        return 'white'\n    }\n\n    return (\n        <div className={styles.root}>\n            {gridModel$.cells.map((c, i) => {\n                const [col, row] = GridModel.colRow(i)\n                return (\n                    <div\n                        key={i}\n                        onMouseEnter={() => setHoveredColRow([col, row])}\n                        onMouseLeave={() => setHoveredColRow(undefined)}\n                        style={{backgroundColor: backgroundColor(col, row, c)}}>\n                        <Cell {...c}/>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\n","import React, {FC, useEffect, useState} from 'react'\nimport {Grid} from './stories/Grid'\nimport {Grid as GridModel, GRIDS} from './models/Grid'\nimport styles from './App.module.scss'\nimport {STEPS} from './models/Solver'\nimport {useLocation} from \"react-router-dom\";\n\nconst gridNotationRegex = /^[1-9.]{81}$/;\n\nexport const App: FC = () => {\n    const [initialHash] = useState(window.location.hash.substring(1)) // remove # at the beginning\n    const initialGridFromHashOrDefault = initialGrid(initialHash)\n    const [gridInNotation, setGridInNotation] = useState(initialGridFromHashOrDefault)\n    const [gridModel, setGridModel] = useState(GridModel.newFromNotation(gridInNotation))\n    const [gridIsValid, setGridIsValid] = useState(gridNotationRegex.test(gridInNotation) && gridModel.isValid())\n    let {hash} = useLocation()\n    hash = hash.substring(1) // remove # at the beginning\n    if (hash !== initialHash && hash !== gridInNotation && gridNotationRegex.test(hash)) {\n        setGridInNotation(hash)\n    } else if (!gridNotationRegex.test(hash)) {\n        window.location.replace('#' + gridInNotation)\n    }\n    const [render, forceRender] = useState(false)\n    useEffect(() => {\n        let newModel = GridModel.newFromNotation(gridInNotation)\n        setGridModel(newModel)\n        setGridIsValid(gridNotationRegex.test(gridInNotation) && newModel.isValid())\n        setStepByStep([])\n    }, [setGridModel, gridInNotation])\n    const [stepByStep, setStepByStep] = useState<[string, GridModel][]>([])\n\n    function initialGrid(initialHash: string) {\n        if (gridNotationRegex.test(initialHash)) {\n            return initialHash\n        }\n        return GRIDS['easy'][Math.floor(Math.random() * GRIDS['easy'].length)]\n    }\n\n    function reset() {\n        if (gridIsValid) {\n            setGridModel(GridModel.newFromNotation(gridInNotation))\n            setStepByStep([])\n        } else {\n            window.location.hash = \"\"\n            window.location.reload()\n        }\n    }\n\n    function generateGrid(difficulty: keyof typeof GRIDS) {\n        const newGrid = GRIDS[difficulty][Math.floor(Math.random() * GRIDS[difficulty].length)]\n        window.location.replace('#' + newGrid)\n    }\n\n    function solve() {\n        let remainingStepsWithoutChange = STEPS.length\n        let nextStep = 0\n        let cleanedGrid\n        let same\n        const stepByStepGrids: [string, GridModel][] = [['Initial grid', gridModel]]\n        let oldGrid = stepByStepGrids[stepByStepGrids.length - 1][1]\n        let newGrid = oldGrid\n        while (remainingStepsWithoutChange > 0) {\n            oldGrid = stepByStepGrids[stepByStepGrids.length - 1][1]\n            newGrid = oldGrid\n            const originalNewGrid = newGrid\n            let wasCleaned = false\n            do {\n                cleanedGrid = newGrid.solveWithStep('fillNumberOrCandidatesForAllCells')\n                same = GridModel.colorDiff(newGrid, cleanedGrid)\n                if (!same) {\n                    newGrid = cleanedGrid\n                    wasCleaned = true\n                }\n            } while (!same)\n            if (wasCleaned) {\n                GridModel.colorDiff(originalNewGrid, cleanedGrid)\n                stepByStepGrids.push(['fillNumberOrCandidatesForAllCells', cleanedGrid])\n            }\n            newGrid = oldGrid.solveWithStep(STEPS[nextStep])\n            same = GridModel.colorDiff(oldGrid, newGrid)\n            remainingStepsWithoutChange = same ? remainingStepsWithoutChange - 1 : STEPS.length\n            if (!same) {\n                stepByStepGrids.push([STEPS[nextStep], newGrid])\n            }\n            nextStep = (nextStep + 1) % STEPS.length\n        }\n        if (!newGrid.isCompleted()) {\n            const solvedGrid = newGrid.backtracking()\n            if (solvedGrid) {\n                stepByStepGrids.push(['backtracking', solvedGrid])\n            }\n        }\n        setStepByStep([...stepByStepGrids])\n        setGridModel(stepByStepGrids[stepByStepGrids.length - 1][1])\n        forceRender(!render)\n    }\n\n    return (\n        <div className={styles.root}>\n            <div className={styles.left}>\n                <section>\n                    <strong>Generate a grid</strong>\n                    <div style={{display: 'flex', flexDirection: 'column', gap: '10px'}}>\n                        <button type={'button'} onClick={() => generateGrid('easy')}>Easy</button>\n                        <button type={'button'} onClick={() => generateGrid('medium')}>Medium</button>\n                        <button type={'button'} onClick={() => generateGrid('hard')}>Hard</button>\n                        <button type={'button'} onClick={() => generateGrid('expert')}>Expert</button>\n                    </div>\n                </section>\n                <section>\n                    <strong>Customize or paste grid</strong>\n                    <textarea maxLength={81} value={gridInNotation}\n                              onChange={e => {\n                                  window.location.replace('#' + e.currentTarget.value)\n                                  setGridInNotation(e.currentTarget.value);\n                              }}/>\n                    {!gridIsValid && <span style={{color: 'red'}}>This grid is invalid</span>}\n                </section>\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '5px'}}>\n                    <section>\n                        <strong>Controls</strong>\n                        <ul style={{margin: 0, padding: '0', listStylePosition: 'inside'}}>\n                            <li>Mouse hover over a cell</li>\n                            <li>Press a number to set it on that cell</li>\n                            <li>Press shift+number to set it as candidate on that cell</li>\n                            <li>Press backspace or delete to clear a cell</li>\n                        </ul>\n                    </section>\n                </div>\n            </div>\n            <div className={styles.center}>\n                <Grid gridModel={gridModel}/>\n            </div>\n            <div className={styles.right}>\n                <section>\n                    <strong>Solve the grid</strong>\n                    <div style={{display: 'flex', gap: '20px'}}>\n                        <button type={'button'} onClick={() => solve()} disabled={!gridIsValid}>Solve</button>\n                        <button type={'button'} onClick={() => reset()}>Reset</button>\n                    </div>\n                </section>\n                <div style={{overflow: 'auto', padding: '0 10px'}}>\n                    {gridIsValid && stepByStep.length > 0 && stepByStep?.map(([step, g], i) => (\n                        <div key={i} style={{zoom: 0.7, display: 'flex', flexDirection: 'column', gap: '5px'}}>\n                            <strong\n                                style={{textTransform: 'capitalize'}}>{i}. {step.replace(/([a-z0-9])([A-Z])/g, '$1 $2')}</strong>\n                            <Grid gridModel={g}/>\n                        </div>\n                    ))}\n                </div>\n                {/* reserves the width of the section, so it doesn't jump on `solve` */}\n                <div style={{zoom: 0.7, height: 0, visibility: 'hidden'}}>\n                    <Grid gridModel={gridModel}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './App'\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}